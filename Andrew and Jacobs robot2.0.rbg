<Version>1.0.1</Version>

<ProgrammingBlock type="comment">drive until it hits a wall</ProgrammingBlock>

<ProgrammingBlock type="loop" loopType="RepeatUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">SensorValue[touch]</Parameter>
        <Parameter name="operator" type="typedef">==</Parameter>
        <Parameter name="RHS" type="float">1</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float" default="1">10</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short" default="50">40</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="comment">turn right 90 degrees</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="resetGyro">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">gyro</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="loop" loopType="RepeatUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getGyroDegrees(gyro)</Parameter>
        <Parameter name="operator" type="typedef">&gt;=</Parameter>
        <Parameter name="RHS" type="float">90</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="turnRight">
    <Parameters>
        <Parameter name="quantity" type="float">5</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">45</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="comment">after right turn,go forward or backward, launch catapault, to hit target</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotorTarget">
    <Parameters>
        <Parameter name="nMotorIndex" type="base typedef" typeDef="tMotor">launcher</Parameter>
        <Parameter name="nPosition" type="float">degrees</Parameter>
        <Parameter name="nSpeed" type="short">110</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">launcher</Parameter>
        <Parameter name="speed" type="short">75</Parameter>
    </Parameters>
</ProgrammingBlock>

<RobotConfiguration>#pragma config(Sensor, S1,     ultrasonic,     sensorEV3_Ultrasonic)
#pragma config(Sensor, S2,     touch,          sensorEV3_Touch)
#pragma config(Sensor, S3,     gyro,           sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Motor,  motorA,          launcher,      tmotorEV3_Large, PIDControl, reversed, encoder)
#pragma config(Motor,  motorB,          rightwheel,    tmotorEV3_Large, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motorC,          leftwheel,     tmotorEV3_Large, PIDControl, reversed, driveLeft)
#pragma config(Motor,  motorD,           ,             tmotorEV3_Large, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, S1,     ultrasonic,     sensorEV3_Ultrasonic)
#pragma config(Sensor, S2,     touch,          sensorEV3_Touch)
#pragma config(Sensor, S3,     gyro,           sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Motor,  motorA,          launcher,      tmotorEV3_Large, PIDControl, reversed, encoder)
#pragma config(Motor,  motorB,          rightwheel,    tmotorEV3_Large, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motorC,          leftwheel,     tmotorEV3_Large, PIDControl, reversed, driveLeft)
#pragma config(Motor,  motorD,           ,             tmotorEV3_Large, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	// drive until it hits a wall
	repeatUntil (SensorValue[touch] == 1) {
		forward(10, degrees, 40);
	}
	// turn right 90 degrees
	resetGyro(gyro);
	repeatUntil (getGyroDegrees(gyro) &gt;= 90) {
		turnRight(5, degrees, 45);
	}
	// after right turn,go forward or backward, launch catapault, to hit target
	setMotorTarget(launcher, degrees, 110);
	setMotor(launcher, 75);
}
</CSource>
