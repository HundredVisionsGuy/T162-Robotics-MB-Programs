<?xml version="1.0" encoding="UTF-8"?>
<RBCVersion>1.0.1</RBCVersion>

<Platform>EV3</Platform>

<CompilerMode>Real</CompilerMode>

<MenuLevel>SuperUser</MenuLevel>

<CompileAndDownload>NO</CompileAndDownload>

<NaturalLanguageFlag>True</NaturalLanguageFlag>

<DebuggerWindows></DebuggerWindows>

<Version>1.0.1</Version>

<ProgrammingBlock type="loop" loopType="RepeatUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">SensorValue[touch]</Parameter>
        <Parameter name="operator" type="typedef">==</Parameter>
        <Parameter name="RHS" type="short">1</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="backward">
    <Parameters>
        <Parameter name="quantity" type="float">60</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">60</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">3</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="functionCall" function="turnRight">
    <Parameters>
        <Parameter name="quantity" type="float">3</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
        <Parameter name="speed" type="short">45</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="loop" loopType="RepeatUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">SensorValue[touch]</Parameter>
        <Parameter name="operator" type="typedef">==</Parameter>
        <Parameter name="RHS" type="short">1</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="backward">
    <Parameters>
        <Parameter name="quantity" type="float">2</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">60</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">3</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="turnRight">
    <Parameters>
        <Parameter name="quantity" type="float">90</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">45</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">3</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motorA</Parameter>
        <Parameter name="speed" type="short">100</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotorTarget">
    <Parameters>
        <Parameter name="nMotorIndex" type="base typedef" typeDef="tMotor">motorA</Parameter>
        <Parameter name="nPosition" type="float">degrees</Parameter>
        <Parameter name="nSpeed" type="short">110</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float">45</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<RobotConfiguration>#pragma config(Sensor, S1,     ultrasonic,     sensorEV3_Ultrasonic)
#pragma config(Sensor, S2,     touch,          sensorTouch)
#pragma config(Motor,  motorA,          launcher,      tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          rightwheel,    tmotorEV3_Large, PIDControl, driveRight, encoder)
#pragma config(Motor,  motorC,          leftwheel,     tmotorEV3_Large, PIDControl, driveLeft)
#pragma config(Motor,  motorD,           ,             tmotorEV3_Large, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, S1,     ultrasonic,     sensorEV3_Ultrasonic)
#pragma config(Sensor, S2,     touch,          sensorTouch)
#pragma config(Motor,  motorA,          launcher,      tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          rightwheel,    tmotorEV3_Large, PIDControl, driveRight, encoder)
#pragma config(Motor,  motorC,          leftwheel,     tmotorEV3_Large, PIDControl, driveLeft)
#pragma config(Motor,  motorD,           ,             tmotorEV3_Large, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	repeatUntil (SensorValue[touch] == 1) {
		backward(60, rotations, 60);
		wait(3, seconds);
	}
	turnRight(3, seconds, 45);
	repeatUntil (SensorValue[touch] == 1) {
		backward(2, rotations, 60);
		wait(3, seconds);
		turnRight(90, degrees, 45);
		wait(3, seconds);
	}
	setMotor(motorA, 100);
	setMotorTarget(motorA, degrees, 110);
	forward(45, degrees, 50);
}
</CSource>
